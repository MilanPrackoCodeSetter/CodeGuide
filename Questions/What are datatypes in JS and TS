WHAT ARE DATATYPES IN JS AND TS?

What would a junior say? 

JS is a dynamically-typed language. A variable has a data type that depends on the current value. On other hand, TS is a strong-typed language, where the variable has a strictly defined data type. 

What would a medior say?

JS is a dynamically-typed language. A variable has a data type that depends on the current value. There are primitive data types – Number, String, Boolean and structural type – Object. Despite JS is dynamically typed, understanding the data types is very important. 

TS is a strong-typed language, where the variables have strict data types. The group of JS data types is extended by TS, about some structural root data types, e.g. any or void. 

What would a senior say? 

JS is a dynamically-typed language. A variable has a data type depending on the current value. There are primitive data types – number, string, boolean, bigint, symbol, undefined, null. There are also the structural type – Object, Array, Map, WeakMap, Set, WeakSet, Date, and custom objects. And finally, there is a function data type. Support of each datatype depends on the version of ECMAScript you use. 

Though JS is dynamically-typed, understanding the data types is very important, especially the fact all primitive types are immutable and structural types are mutable, which may have a straight impact on resource consumption. 

TS is a strong-typed language, where the variables have strict data types. The group of JS data types is extended by TS about a lot useful types: Tuple, Enum, Unknow, Any, Void, Never. You can also use an interface, which is used as syntactic sugar, during the compilation from TS to JS. And as a bonus, we can combine more data types into one via Union, Intersection, or Conditional types.